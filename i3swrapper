#!/usr/bin/env python

# This script is a simple wrapper which prefixes each i3status line with custom
# information. It is a python reimplementation of:
# http://code.stapelberg.de/git/i3status/tree/contrib/wrapper.pl
#
# To use it, ensure your ~/.i3status.conf contains this line:
#     output_format = "i3bar"
# in the 'general' section.
# Then, in your ~/.i3/config, use:
#     status_command i3status | ~/i3status/contrib/wrapper.py
# In the 'bar' section.
#
# (C) 2012 Valentin Haenel <valentin.haenel@gmx.de>
#
# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License (WTFPL), Version
# 2, as published by Sam Hocevar. See http://sam.zoy.org/wtfpl/COPYING for more
# details.

from bisect import bisect_left
import json
import re
import sys

re_mem = re.compile(r'(MemFree|Buffers|Cached):')

# modified version of gradient seen on
# http://blogs.perl.org/users/ovid/2010/12/perl101-red-to-green-gradient.html


def gradient(lo, hi, threshold=None):

    def get_color(val):
        if val <= lo:
            return '#FF0000'
        elif val >= hi:
            return '#00FF00'
        elif val < mid:
            return '#FF{0:02X}00'.format(int((val - lo) * scale))
        else:
            return '#{0:02X}FF00'.format(int(255 - (val - mid) * scale))

    def func(val):
        return colors[bisect_left(breakpoints, val)]

    if threshold:
        mem_total = threshold
    else:
        # get total memory
        with open('/proc/meminfo') as f:
            mem_total = int(f.readline().split()[1])
    mid = (lo + hi) / 2
    scale = 255 / (mid - lo)
    colors = [get_color(i) for i in range(lo, hi + 1)]
    step = mem_total // (hi - lo + 1)
    breakpoints = [i for i in range(step, mem_total, step)]

    return func


def get_memory():
    """ Get memory from /proc/meminfo. """
    with open('/proc/meminfo') as f:
        return sum(map(lambda x: int(x.split()[1]),
                   filter(re_mem.match, f.readlines())))


def print_line(message):
    """ Non-buffered printing to stdout. """
    sys.stdout.write(''.join([message, '\n']))
    sys.stdout.flush()


def read_line():
    """ Interrupted respecting reader for stdin. """
    # try reading a line, removing any extra whitespace
    try:
        line = sys.stdin.readline().strip()
        # i3status sends EOF, or an empty line
        if not line:
            sys.exit(3)
        return line
    # exit on ctrl-c
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    # divide memory into four color segments
    mem_color = gradient(0, 3, 1024000)

    # Skip the first line which contains the version header.
    print_line(read_line())

    # The second line contains the start of the infinite array.
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        # ignore comma at start of lines
        if line.startswith(','):
            line, prefix = line[1:], ','

        j = json.loads(line)
        # insert information into the start of the json, but could be anywhere
        # CHANGE THIS LINE TO INSERT SOMETHING ELSE
        memory = get_memory()
        j.insert(0, {'full_text': 'Mem: {} MB'.format(memory // 1024),
                 'name': 'mem_info', 'color': mem_color(memory)})
        # and echo back new encoded json
        print_line(''.join([prefix, json.dumps(j)]))
