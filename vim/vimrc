" General {{{
	set nocompatible  " make Vim behave in a more useful way
	set autoindent  " use the indent of the previous line for a new one
	set autoread  " automatically read changed file
	set backspace=indent,eol,start  " allow backspacing
	set hidden  " change buffer more easily
	set modeline  " activate modelines
	set mouse=a  " enable the mouse in all modes
	set noswapfile
	set nowrapscan  " stop searching at the end or beginning of the file
	set rtp+=/usr/local/share/vim/bundle/Vundle.vim  " set runtime path
	set scrolloff=2  " keep 2 lines around the cursor
	if exists('+autochdir')
		set autochdir  " change to directory of file in buffer
	endif

	if has('extra_search')
		set incsearch  " highlight as you type
	endif

	if has('folding')
		set foldmethod=indent  " foldmethod
		set foldlevelstart=99  " no folds closed on start
	endif

        if has('insert_expand')
		set completeopt=menu,menuone  " disable preview scratch window
        endif

	if has('wildmenu')
		set wildmenu
		set wildmode=list:longest,full
	endif

	if has('writebackup')
		set nowritebackup
	endif
" }}}

" Mappings {{{
	let mapleader=','

	" enclose visual selection
	vnoremap <Leader>" c"<C-r>""<ESC>
	vnoremap <Leader>' c'<C-r>"'<ESC>
	vnoremap <Leader>{ c{ <C-r>" }<ESC>
	vnoremap <Leader>} c{<C-r>"}<ESC>
	vnoremap <Leader>[ c[ <C-r>" ]<ESC>
	vnoremap <Leader>] c[<C-r>"]<ESC>
	vnoremap <Leader>( c( <C-r>" )<ESC>
	vnoremap <Leader>) c(<C-r>")<ESC>

	" buffer navigation
	nnoremap <C-h> :bf<CR>
	nnoremap <C-j> :bp<CR>
	nnoremap <C-k> :bn<CR>
	nnoremap <C-l> :bl<CR>

	" toggle fold under cursor
	nnoremap <Space> za
	" new line on return
	nnoremap <CR> o<ESC>
	" toggle spell checking
	nnoremap <silent> <Leader>s :set spell!<CR>
	" copy, paste and cut
	nnoremap <Leader>c ggVG"+y
	vnoremap <Leader>c "+y
	nnoremap <Leader>v "+gP
	vnoremap <Leader>x "+x
	" Start the find and replace command across the entire file
	vnoremap <C-r> <ESC>:%s/<C-r>=GetVisual()<CR>//gc<left><left><left>

	nnoremap <Leader>fu :CtrlPFunky<CR>
	" narrow the list down with a word under cursor
	nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>

	nnoremap <Leader>n :NERDTreeToggle<CR>
	nnoremap <Leader>t :TagbarToggle<CR>

	" bufkill
	nnoremap <Leader>bd :BD<CR>
" }}}

" Plugins {{{
	" Options {{{
		let g:airline#extensions#tabline#enabled=1
		let g:airline#extensions#whitespace#enabled=0
		let g:airline_powerline_fonts=1
		let g:airline_theme='molokai'
		let g:ctrlp_extensions = ['funky']
		let g:delimitMate_balance_matchpairs=1
		let g:delimitMate_expand_cr=2
		let g:delimitMate_jump_expansion=1
		let g:gitgutter_eager=0
		let g:gitgutter_realtime=0
		let g:NERDTreeQuitOnOpen=1
		let g:tagbar_autoclose=1
		let g:tagbar_autofocus=1
		let g:ycm_confirm_extra_conf=0
		let g:ycm_enable_diagnostic_signs=0

		function! AirlineInit()
			let g:airline_section_y=''
			let g:airline_section_z=airline#section#create(['%4L ', 'linenr',':%3v'])
		endfunction
	" }}}

	filetype off  " required by Vundle.vim
	call vundle#begin('/usr/local/share/vim/bundle')
	Plugin 'gmarik/Vundle.vim'
	Plugin 'airblade/vim-gitgutter'  " git diff
	Plugin 'bling/vim-airline'  " lean & mean status/tabline
	Plugin 'kien/ctrlp.vim'  " fuzzy finder
	Plugin 'majutsushi/tagbar'  " browse the tags of source code files
	Plugin 'Raimondi/delimitMate'  " automatic closing of quotes, parenthesis, brackets, etc.
	Plugin 'scrooloose/nerdcommenter'  " comments
	Plugin 'scrooloose/nerdtree'  " file explorer
	Plugin 'scrooloose/syntastic'  " syntax checking
	Plugin 'tacahiroy/ctrlp-funky'  " function nativator for ctrlp.vim
	Plugin 'terryma/vim-multiple-cursors'  " multiple selection feature
	Plugin 'thinca/vim-visualstar'  " searcher
	Plugin 'tomasr/molokai'  " molokai colorscheme
	Plugin 'tpope/vim-fugitive'  " git wrapper
	Plugin 'tpope/vim-surround'  " surroundings
	Plugin 'Valloric/YouCompleteMe'  " code-completion engine
	Plugin 'vim-scripts/bufkill.vim'  " kill buffers with closing the window
	call vundle#end()
	filetype plugin indent on  " required by Vundle.vim
" }}}

" Appearance {{{
	set background=dark
	set laststatus=2  " always show status line
	set listchars=tab:â–¶\  " shown tab character
	set noet
	set number
	set sts=4
	set sw=4
	set ts=4
	colorscheme molokai

	if has('linebreak')
		set numberwidth=5
	endif

	if has('syntax')
		set colorcolumn=80
		syntax enable
	endif

	" GUI {{{
		if has('gui_running')
			set columns=87
			set guifont=Source\ Code\ Pro\ 11
			set guioptions-=T  " remove toolbar
		endif
	" }}}
" }}}

" Autocommands {{{
	if has('autocmd')
		autocmd VimEnter * call AirlineInit()
		autocmd BufWrite * call Preserve("%s/\\( \\\|\t\\)\\+$//e")

		autocmd FileType python setlocal ts=4 sts=4 sw=4 et
		autocmd FileType c setlocal cino=:0

		augroup filetypedetect
			autocmd BufNewFile,BufRead *.h set filetype=c
			autocmd BufNewFile,BufRead CMakeLists set filetype=cmake
			autocmd BufNewFile,BufRead *.md set filetype=markdown
		augroup END
	endif
" }}}

" Escape special characters in a string for exact matching.
" This is useful to copying strings from the file to the search tool
" Based on http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim
function! EscapeString (string)
	let string=a:string
	" Escape regex characters
	let string = escape(string, '^$.*\/~[]')
	" Escape the line endings
	let string = substitute(string, '\n', '\\n', 'g')
	return string
endfunction

" Get the current visual block for search and replaces
" This function passed the visual block through a string escape function
" Based on http://stackoverflow.com/questions/676600/vim-replace-selected-text/677918#677918
function! GetVisual() range
	" Save the current register and clipboard
	let reg_save = getreg('"')
	let regtype_save = getregtype('"')
	let cb_save = &clipboard
	set clipboard&

	" Put the current visual selection in the " register
	normal! ""gvy
	let selection = getreg('"')

	" Put the saved registers and clipboards back
	call setreg('"', reg_save, regtype_save)
	let &clipboard = cb_save

	"Escape any special characters in the selection
	let escaped_selection = EscapeString(selection)

	return escaped_selection
endfunction

function! Preserve(command)
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line('.')
	let c = col('.')
	" Do the business:
	execute a:command
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction

set exrc  " read vimrc in current directory
set secure  " prevent local vimrc from doing nasty things
